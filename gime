#!/usr/bin/env bash

# Copyright 2021 Miguel Silva
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


### DEFAULT PROGRAM ARGUMENTS ###
KEYWORD=""
DATA=""
LABEL=""
SEP1=" like "
SEP2=" like "
SAVE=false
STRING_CASE=""
SQLITE_ARGS=( "-batch" "-separator" " " )
COLUMNS="data"
DISPLAY_MODE=""
ALL=false
CONTAINS_LABEL=false
CONTAINS_KEYWORD=false
SHOW_LABEL=false
EQUALS_MODE=false
DB_PATH=/var/gime/data.db

### USAGE & PROGRAM ARGUMENTS PARSING ###
_usage() {
    printf "$1"
cat << EOF
Usage: gime <command> [flags] - Display/Store/Delete data associated with a label.
Available Commands & Flags
help                    Help about any command
save <LABEL> <DATA>     Save <DATA> along with <LABEL>
[LABELS]                Display mode (labels not mandatory)
    <LABEL>                         Display if there are rows that contain this <LABEL> 
    <LABEL1,LABEL2,...>             Display if there is a label that has a subset of <LABEL1,LABEL2,...>
    -a      --all                   Display all existing data
    -c      --contains <KEYWORD>    Display if there are rows that the data contains <KEYWORD>
    -cl     --contains-label        Display if there are rows where the label contains [LABELS]
    -i      --insensitive           Set case insensitive
    -d      --detailed              Set detailed mode, where label and data is shown
    -e      --equals                Set equals mode, where data is only displayed if label equals [LABELS]
delete [LABELS]                     Delete mode (labels not mandatory)
    <LABEL>                         Delete if there are rows that contain this <LABEL>
    <LABEL1,LABEL2,...>             Delete if there is a label that has a subset of <LABEL1,LABEL2,...>
    -a      --all                   Delete all existing data
    -c      --contains <KEYWORD>    Delete if there are rows that the data contains <KEYWORD>
    -cl     --contains-label        Delete if there are rows where the label contains [LABELS]
    -i      --insensitive           Set case insensitive
    -e      --equals                Set equals mode, where data is only deleted if label equals [LABELS]
labels                  Display all unique existing labels
check-for-update        Check if program has any update available
update                  Update program
uninstall               Uninstall program
EOF
    exit
}

### Functions ###
_uninstall() {
    curl -sL https://raw.githubusercontent.com/silvagpmiguel/gime/main/uninstall | sudo bash
    exit
}

_check_update() {
    curl -sL https://raw.githubusercontent.com/silvagpmiguel/gime/main/check-update | bash
}

_update() {
    local check=$(_check_update)
    if [[ "$check" == *"new"* ]]; then
        curl -sL https://raw.githubusercontent.com/silvagpmiguel/gime/main/install | sudo bash
    else
        echo "$check"
    fi
    exit
}

### Program Arguments Parsing ###
[[ "$#" == "0" ]] && _usage
while :; do
    case "$1" in
        help)
            [[ $DISPLAY_MODE == "" ]] && _usage || LABEL="$1"
        ;;
        delete)
            [[ $DISPLAY_MODE == "" ]] && DISPLAY_MODE=false || LABEL="$1"
        ;;
        save)
            if [[ "$DISPLAY_MODE" == "" ]]; then
                if [[ "$2" != "" && "$3" != "" ]]; then
                    LABEL=$(echo "$2")
                    DATA=$(echo "$3")
                    sqlite3 -batch "${DB_PATH}" "insert into saved_data values('${LABEL}','${DATA}')"
                    exit
                else
                    _usage "Wrong usage.\n"
                fi
            else
                LABEL="$1"
            fi
        ;;
        labels)
            IFS=','; labels=( $(sqlite3 -batch "/var/gime/data.db" "select label from saved_data") )
            IFS=$'\n'; printf "%s\n" "${labels[@]}" | sort | uniq
            exit
        ;;
        check-for-update)
            [[ $DISPLAY_MODE == "" ]] && _check_update; exit || LABEL="$1" 
        ;;
        update)
            [[ $DISPLAY_MODE == "" ]] && _update || LABEL="$1"
        ;;
        uninstall)
            [[ $DISPLAY_MODE == "" ]] && _uninstall || LABEL="$1"
        ;;
        -a|--all)
            ALL=true; shift "$#"
        ;;
        -c|--contains)
            [[ "$2" != "" ]] && CONTAINS_KEYWORD=true; KEYWORD=$(echo "$2"); shift || _usage "Wrong usage.\n"
        ;;
        -cl|--contains-label)
            CONTAINS_LABEL=true
        ;;
        -i|--insensitive)
            STRING_CASE=" collate nocase"
        ;;
        -d|--detailed)
            SHOW_LABEL=true; COLUMNS="label,data"
        ;;
        -e|--equals)
            SEP2="="; EQUALS_MODE=true
        ;;
        ?*)
            LABEL="$1"
        ;;
        "")
            [[ "$DISPLAY_MODE" == "" ]] && DISPLAY_MODE=true; break || break
        ;;
        *)
            _usage "Wrong usage.\n"
        ;;
    esac
    shift
done

### MAIN PROGRAM ###
if [[ "$LABEL" != "" ]]; then
    REVERSE_LABEL=$(echo -e "${LABEL//,/\\n}" | tac)
    REVERSE_LABEL="%,${REVERSE_LABEL//$'\n'/,%},%"
    if $EQUALS_MODE; then
        LABEL=",${LABEL},"
        LABEL_COND="(',' || label || ','${SEP2}'${LABEL}'${STRING_CASE})"
    elif $CONTAINS_LABEL; then
        LABEL="%,${LABEL//,/%,%},%"
        LABEL_COND="((',' || label || ','${SEP2}'${LABEL}'${STRING_CASE}) or (',' || label || ','${SEP2}'${REVERSE_LABEL}'${STRING_CASE}))"
    else 
        LABEL="%,${LABEL//,/,%},%"
        LABEL_COND="((',' || label || ','${SEP2}'${LABEL}'${STRING_CASE}) or (',' || label || ','${SEP2}'${REVERSE_LABEL}'${STRING_CASE}))"
    fi
fi
if [[ "$KEYWORD" != "" ]]; then
    DATA_COND="(data${SEP1}'%${KEYWORD}%' ${STRING_CASE})"       
fi 
if $DISPLAY_MODE; then
    if $ALL; then
        RESULT=$(sqlite3 "${SQLITE_ARGS[@]}" "${DB_PATH}" "select * from saved_data")
    else
        if [[ "$KEYWORD" != "" && "$LABEL" != "" ]]; then
            RESULT=$(sqlite3 "${SQLITE_ARGS[@]}" "${DB_PATH}" "select ${COLUMNS} from saved_data where ${DATA_COND} and ${LABEL_COND}")
        elif [[ "$LABEL" != "" ]]; then
            RESULT=$(sqlite3 "${SQLITE_ARGS[@]}" "${DB_PATH}" "select ${COLUMNS} from saved_data where ${LABEL_COND}")
        else
            RESULT=$(sqlite3 "${SQLITE_ARGS[@]}" "${DB_PATH}" "select ${COLUMNS} from saved_data where ${DATA_COND}")
        fi
    fi
    if [[ "$RESULT" != "" ]] && ($ALL || $SHOW_LABEL); then
        printf "LABEL DATA\n%s\n" "${RESULT}" | column -t
    elif [[ "$RESULT" != "" ]] && ! $SHOW_LABEL; then
        printf "${RESULT}\n"
    fi
else
    if $ALL; then
        sqlite3 -batch "${DB_PATH}" "delete from saved_data" && exit
    elif [[ "$KEYWORD" != "" && "$LABEL" != "" ]]; then
        sqlite3 -batch "${DB_PATH}" "delete from saved_data where ${DATA_COND} and ${LABEL_COND}"
    elif [[ "$LABEL" != "" ]]; then
        sqlite3 -batch "${DB_PATH}" "delete from saved_data where ${LABEL_COND}"
    else
        sqlite3 -batch "${DB_PATH}" "delete from saved_data where ${DATA_COND}"
    fi
fi